#+title: Budgeting
#+options: toc:nil

* Overview

These notes describe a proposed system of personal financial
accounting which (a) is equivalent to double-entry book-keeping; (b)
has transactions as the primary entity, rather than accounts; (c) has
some advantages for budgeting.

The motivating ideas here are:
- Accounting is traditionally about assets and liabilities, and their
  relation to expenses and income. The concept of “asset” is tricky:
  on one view, it is a cost that we expect will be matched with a
  revenue; on other view it is some kind of property right. Here,
  there are just future transactions whose exact date we don't yet
  know.
- A “budget” is now a set of transactions that will occur in the future,
  and we do know when.
- We want “composable” accounts. 
- “Assets” and “liabilities” are a reporting artefact and are obtained
  from all transactions so far.
  
  
Contents:
2. Definitions
3. Examples of common transactions
4. Hierarchies of people and things
4. Producing statements
5. Rules for entering common transactions
6. Budgeting and planning


* Definitions

1. Fix, once and for all, a finite set, $\mathcal{P}$, of /persons/,
   representing the people and institutions in the world who might
   receive or provide goods, services, or favours to me. We assume
   that there is a distinguished member of $\mathcal{P}$ called
   _Self_.

2. A /period/ is a pair of dates, $t_1$ and $t_2$, such that
   $t_1\leqslant t_2$. The upper bound, $t_2$, may be one of the two
   special values “some day” or “any day” (and each of these is
   greater than any other date).

   A period represents the time during which a transaction may have
   occured. The special dates are used to represent an interval of
   which, at the time the transaction is known, the upper bound is
   unknown. The choice of “some day” or “any day” indicates which
   party has the option of choosing when the transaction occurs.

3. A /favour/ is
   1. an ordered pair, $(i, j)$, of people, $i,j\in \mathcal{P}$; 
   2. a non-negative number, $v$; and
   3. a period, $T$.99999999999999

   A favour represents the provision of a good or service, of value
   $v$, to $j$ by $i$, sometime in period $T$. Person $i$ is called
   the /creditor/ and person $j$ the /debtor/.  We sometimes write the
   favour as $i \overset{v}{\to} j$, ignoring the period.

   For $k$ a person, we define the /credit value/ of a favour to $k$ as
   \begin{equation*}
   \pi_k^{\text Cr}(i\overset{v}{\to}j) =
   \begin{cases}
   v &\text{if $k = i$,} \\
   0 & \text{otherwise,}
   \end{cases}
   \end{equation*}
   and likewise the /debit value/ of a favour to $k$ is
   \begin{equation*}
   \pi_k^{\text Dr}(i\overset{v}{\to}j) =
   \begin{cases}
   v &\text{if $k = j$,} \\
   0 & \text{otherwise.}
   \end{cases}
   \end{equation*}
   
4. A /transaction/ is a set of favours, $f_n$, such that:
   \begin{equation*}
   \sum_n  \pi_k^{\text Cr}(f_n) = \sum_n \pi_k^{\text Dr}(f_n)
   \qquad\forall k\in\mathcal{P}.
   \end{equation*}
   That is, in any transaction each person enters equally as a
   creditor and a debtor. (Note that this constraint applies
   separately to each person but not necessarily at each time.)

5. A /ledger/ is a set of transactions.


* PROBLEMS

It seems unnecessarily complicated making each person net to zero in
_every_ transaction.

1. Drop the condition that, at each transaction, each person must net
   to zero. Thus, a transaction is simply a set of favours; albeit one
   where the total debits minus credits is zero (since that is
   true of each favour in isolation). 
2. Add, as an extra condition, the rule that the net debits minus
   credits is zero for each person separately over all time.

Well, but now (2) might not be true until we've got to the end of
time, which is the thing we were trying to avoid.

Here is an example of the problem. On day 1, you give me an apple:
that's one favour, with me as the debtor and you as the creditor. On
day 2, I give you an apple. These are two favours and, sub specie, the
world is in balance. But at day 1 we did not know how or when the
second favour would occur. It might have happened on day 3, for
example. So it seems a stretch to say that these two favours are part
of the same transaction.

We could, on day 1, create two, equal and opposite, favours: one on
day 1 and another at infinity. The same would be true on day 2. Then
the two favours at infinity would cancel out, which is more what
actually happens.

In traditional accounting, we don't include the favours at infinity
since they can be inferred (they are the inverse of the totals to
date). In addition, there is no _Self_ person. Instead, the first
favour is between _Accounts payable_ and _Expense_; and the second
between _Accounts payable_ and, I don't know, _Income_? _Apples_?.

Are there circumstances where the traditional way is inadequate? There
are two motivating examples:

- The one above, which sure seems confusing. What happened to me and
  thee? 
-  



* Example transactions

** Exchanges

The following is a list of common transaction types:

1. Someone does me a favour
2. I buy something from the supermarket with cash
3. I buy something from the supermarket with my bank card
4. I am paid for work.
5. I do work and credit “accounts receivable.” Later, work pays me.
6. I buy a car; it depreciates.
7. I use electricity and estimate my cost; then I pay the thing.
   
*** Someone does me a favour

You might think that this is uncommon. However, consider using a
utility: broadband, say, or electricity. Typically one pays for this
and other utilities in arrears and so, until one does so, one has in
fact been the debtor of a favour from the utility company.

Suppose I use £100 of electricity in March, supplied by PowerCo, which
I will pay at some point in the future. Then the transaction is
composed of two favours:
1. £100; _PowerCo_ to _Self_; 1 March to 31 March.  
2. £100; _Self_ to _PowerCo_; 1 April to Any Day.

The "Any Day" implies that the payment date is determined by
PowerCo. What if I know I will pay during April? Then the second
favour has 30 April as its upper bound. 

What if I want to record the payment? See later. What if my
consumption is an /estimate/ (by me)? See the section on budgeting.

*** I buy something with cash

For example, I buy £50 of groceries from Sainsburys on 1 March. The tricky
bit is that "cash" is a person. Here we have:

1. £50; _Sainsburys_ to _Self_; 1 March.
2. £50; _Cash_ to _Sainsburys_; 1 March.
3. £50; _Self_ to _Cash_; 1 March.

For brevity, an interval with the same upper and lower bound is just
written as the date.    

Note that this is a /three/-way transaction. In traditional
accounting, “Self” does not participate so the transaction is merely
between Cash and Sainsburys. On that view, some accounts, like Cash,
are assets and liabilities; and some, like “Sainsburys” are “nominal”
accounts. My sense is that for nominal accounts the account describes
the nature of the transaction (eg, "expense -- groceries") rather than
the other party.

On the other hand, “Self” is rather like the P&L account. In
traditional accounting, we run a zero-ing process every period which
takes all the expense and income through the P&L. I think this
approach is perhaps clearer.

*** I buy something with a bank card

Similar to buying something with cash:
1. £50; _Sainsburys_ to _Self_; 1 March
2. £50; _Bank/Current Account_ to _Sainsburys_; 1 March
3. £50; _Self_ to _Bank/Current Account_; 1 March.

Okay, one question here. We've introduced a hierarchy to indicate that
_Bank_ might well owe me favours from several different sources: my
current account, a savings account, and so on. What kind of hierarchy
is this? Is it purely for convenience? I will probably want to add up
favours by their due date ... but that's in the favour. Or by their
kind (eg, “groceries”). So ... perhaps it's more like namespacing? I
will have several “current accounts” at different banks?

*** I am paid for work

(I am paid in arrears.)
1. £100; _Self_ to _Job_; March
2. £100; _Job_ to _Bank/Current Account_; 1 April
3. £100; _Bank/Current Account_ to _Self_; 1 April

Here I am using a convenience feature wherein the interval “March”
abbreviates 1 March to 31 March (inclusive).

I'm not sure about the redundancy in favours (2) and (3).

*** Accounts receivable

Here the idea is that I record, in the system, the fact that I have
worked in March and am owed money but, at the time of recording, I
have not yet received the money; however, I am certain that the money
will arrive before the end of April.

As a first pass, ignore the fact that I have a bank account.

Transaction 1:
1. £100; _Self_ to _Job_; March
2. (X) £100; _Job_ to _Self_; April

Transaction 2:
1. (X) £100; _Self_ to _Job_; April
2. £100; _Job_ to _Self_; 2 April

The idea is that the second transaction backs out the initial guess as
to the repayment date and replaces it with the actual one. The (X) are
the transactions which cancel out. (Maybe the second one should be
negative? I don't know. Probably it should be, since there really was
no _Self_ to _Job_ favour in April.)

We have to match the transactions and back out the previous one. We
could not have entered transaction (2) as we did in the previous
example because the “I do work for _Job_” transaction would be
double-counted.

Then, with the bank account, we enter transaction 1 just as we did
before:
1. £100; _Self_ to _Job_; March
2. (X) £100; _Job_ to _Self_; April

But now transaction 2 becomes:
1. (X) -£100; _Job_ to _Self_; April
2. £100; _Job_ to _Bank/Current Account_; 2 April
3. £100; _Bank/Current Account_ to _Self_; 2 April

where, again, we need to match the two (X) transactions. 

How does this work in traditional accounting? First, one maintains
only the /total/ unpaid repayment (as an asset) rather than the
particular period. To manage very different repayment periods, there
are typically a small number of different assets and liabilities:
“accounts receivable” (payable within 90 days, although the deadline
is different for each of the assets), “current assets” (immediately
recoverable), “current liabilities” (due within a year), “fixed
assets” (not immediately recoverable), and “non-current liabilities”
(not due for at least a year). (Maybe also “accounts past due”?)

How does this work when reading a bank statement? The point about the
bank statement is that it is (a) a summary of things that have
happened; and (b) missing part of the transaction. So for every entry
we need to figure out the other persons and, in addition, whether we
have already made a note of this transaction. In the latter case, we
might need to confirm -- or add additional information! -- or we might
need to back it out.

*** A planned payment does not occur

I think we have to back it out.


** Budgeting

** Loans

** Notes from the examples

Do we need a description of the thing that a favour is for? Eg,
"electricity"? What is "something, only I don't know what it is yet"?

Are we using intervals for two different reasons?
1. To note that a favour will be paid on a date in some given period
   only as yet we don't know which date?
2. To note that a favour was aggregated on different days over a time
   period but we don't know (and will never know) how much was
   transacted on each day?
Maybe we can get around this by noting that in (1) the payment may,
for all we know now, be repaid on several days, so long as the
aggregate over the period is correct.  

What is a bank account? It's a tentative favour, of indeterminate
type, whose lower bound is when the deposit was made, and whose upper
bound is “any day.”


* Other characteristics

** Dates

1. 1 March 2023
2. w/c 6 March 2023 (Monday)
3. March 2023
4. 2023
5. 2023w4
6. ISO March 2023 (whole weeks in March)

   
   
** What is known when

1. “Today”
2. The date when a transaction was entered
3. The date (range) of the favour
4. The date before which all favours are known.

Since favours may occur “in the future.”

- Transactions have a “known-by” date, which is the date when the
  transaction was known about by the system. There is the “present
  date” when transactions after this date are supposed to not be
  known; and perhaps the “up to” such that transactions before this
  date are supposed to be known.

  

** “Reasons”

Individual favours have a reason -- the thing they provide -- such as:
- groceries
- electricity
- bike
- ...

Some of these have categories themselves, where the category is
determined by the reason, eg:
- travel
- consumables

However, there are also categorisations useful for analysis which
(may?) also be determined by the reason:

- fixed
- discretionary

The there are categories that are /not/ determined by the category of
the reason, for example:

- holiday
- work-related (eg, suits? commute?)




* Producing reports


* Rules for entering common transactions

** Definitions

*** Merging transactions

A tentative favour may later be backed out and replaced. When this
happens, we retain the component transactions but report them as the
aggregate transaction.

Thus, given some date, a favour may or not /occur/ before that date;
and it may or may not have been /known/ before that date. These are
distinct things.

*** Tentative vs. Definite

A transaction may be marked as /non-final/. A non-final transaction is
one that we expect to be refined, when we know more. For example, when
doing the equivalent of “accrual accounting” for, say, a utility, we
don't yet know when the bill will come in, nor precisely how much it
will be.

A favour may be marked as /tentative/. A tentative favour is one that
arises during reading, when we have only seen one side of a
transaction and we have to guess what the other side is.

When non-final transactions are merged, the date of creation of the
combined transaction is the latest date and “backed out” favours are
(reported as if they had been) removed.

*** Manual entries

Manual entries might be thought of us entries that ought to be generated
automatically when an “accountable event” occurs. (“Accountable event” here
means the giving or receiving of a favour, or an agreement that such will
occur.)

Manual entries are likely to be made for large transactions that will not be
reflected in a statement for some time.

A manual entry might also be made 

*** Automated entries (plans)

** Statements

A /statement/ (for example, a bank statement) is a record of favours
for a specific person (for example, a bank account). It is a list of
favours for which either the creditor or the debtor is that person.

A statement may guarantee to be a /complete/ record of such favours
between two dates, known at the time of production. (We can use this
to cross-check other entries.)

A statement often includes a “total to date,” recording the total
credits and debits from an origin point in the far past up to now. (We
don't record this number but again it is useful for cross-checks).

Statements are the primary way we get outturn data into the
system. The main task, when reading a statement, is to figure out the
transaction that is implied by each favour. There are a few canonical
examples:

*** Expense payment (no budget)

Most favours in a bank statement are part of a transaction in which I
am paying for some other favour immediately; for example, buying
groceries. The favour in the statement is between, say, the bank
account and the supermarket. There are two missing favours: one
between me and the supermarket (for the food!) and one between me and
the bank account (it now owes me less in future).

For these kind of transactions, there may or may not be a true-up
involved. If we have not created a budget, then there isn't. If we
have, then we might need to match this transaction with the budget.

What is the difference between this transaction (with the bank) and
one in which we matched a past transaction? Not entirely sure. But in
the previous case, had we entered the new transaction as it appeared
to have occured, we'd be double-counting. Here we would not be
double-counting because we have not, in the past, entered the
transaction between me and the supermarket.

1. In the past:
   - (a) _Self_ -> _Job_, £100, Jan 2023
   - (b) _Job_ -> _Bank_, £100, 1 Feb 2023
   - (c) _Bank_ -> _Self_, £100, [1 Feb 2023, Any day].

2. Now
   - (a) _Bank_ -> _Supermarket_, £100, 1 March 2023 <-- is this open?
     [1 March, Any day] ??
   - (b) _Supermarket_ -> _Self_, £100, 1 March 2023
   - (c) _Self_ -> _Bank_, £100, 1 March 2023

No double-counting! Huh! In this transaction, only favour (a) is part
of the bank statement. (b) is what I got and (c) is something about my
bank.

(Need some efficient way to decide whether there is ever a time when
Debits > Credits for _Bank_.)

Also, what does the sum at infinity mean? Some kind of boundary
condition?

*** Transfer

Some bank favours are a transaction to another favour-holding service
(such as a different bank account, or _Cash_.)

Some of these might need to be matched with another transaction, on
the other bank account, to find out what they are actually for.

*** Expense/income, budgeted

See budgeting and planning

** Income-generating, fixed assets



* Budgeting and planning

A budget is a set of transactions that are non-final. 





* Chart of Accounts

What we've got in this system is a hierarchy of /favours/, not of
/persons/. (And there’s some rule about which favours can be netted
against which others. “Can only repay beer-debt with beer!”)


* Random

- Suppose I buy groceries. There are two favours: I get a
  favour from the supermarket, and the supermarket gets a
  favour from my bank account. Where is/are the matching
  favour(s)?

  There is a missing favour: from me to my bank account. But
  there isn't a specific time when this has or will
  happened. Maybe I deposited money before today; or maybe I
  have an overdraft facility and I will depost money
  tomorrow. All we really know is that, in the long run, the
  bank account zeros out.

- What if I am owed money by Albert and Bob jointly? The
  future transaction is a known amount, divided in an
  unknown way between Albert and Bob.

The traditional system treats everything as a stock: not
just things like capital equipment and cash, but also things
like consumables and debt. In contrast, this system deals
mainly with consumption and debt. So what is our story about
stock?

We can deal with debt. Debt is an option.

Day 1
A -> B, 1u, on day 1.
B -> A, 1u, somewhere between day 1 and day infinity,
presumably at A's discretion (we've called this 'any,
because, from B's perspective, it could happen "any" day)

Day 3
B -> A, 1u -- how to note that this is repayment?

We have two options (aha ha):

(a) A -> B, 1u, between day 3 and "any day" ("any" day
indicating that it is at B's discretion)

(b) B -> A, -1u, between day 3 and "any day".

On option (a), what happens on day 4?

- from A's perspective, we have

i. Day 1: Gave to B
ii. Day 3: Received from B

That does make us square. However, these aren't necessarily
part of the same transaction. So it can't be that, _sub
specie_, these are the only two favours. (Or, well, I
suppose it could, if all favours were part of the same
transaction?)

Anyway, total remaining in the future:

From B (to A), any time A likes
To B (from A), any time B likes

Maybe this works? If A calls in the favour, then B can
immediately call it back, so the net balance for B, at any
time, is zero.

It also doesn't require us to say whether we are "acquiring
a new credit" or "paying back an existing debt". Is that a
good thing? Or maybe that's the distinction between "some
day" and "any day"? 

Okay, this is all well and good. But now let's introduce an
intermediary, like a bank.

The broad idea is that at any time the bank "owes" me a
favour, at my discretion. So presumably, there is already a
favour of the form:

Bank -> Me, between t0 and "any day"

It's now t > t0. I buy something from a retailer

Retailer -> Me, t

Now, as part of the same transaction, we "transfer" the
favour that the bank owes me to the retailer. So we want to
end up with,

(Final:) Bank -> Retailer, between t1 and "any day".

We could just add that? And also add:

Me -> Bank, between t1 and "any day".

That's how I pay back the bank ... with an "any day".

Lastly, what is the correct reason to use in all of this?
Going back to the first example, it's clear that the favour
could be anything. So ... is the reason "any" (or null, or
"favour")? Maybe null...






